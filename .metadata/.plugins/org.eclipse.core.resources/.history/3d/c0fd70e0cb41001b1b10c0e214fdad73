package com.tsarhydrantine.tsbase.tsBlocks;

import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.block.LeavesBlock;
import net.minecraft.item.BlockItemUseContext;
import net.minecraft.state.BooleanProperty;
import net.minecraft.state.StateContainer;
import net.minecraft.state.properties.BlockStateProperties;
import net.minecraft.util.Direction;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.shapes.VoxelShape;
import net.minecraft.util.math.shapes.VoxelShapes;
import net.minecraft.world.IBlockReader;
import net.minecraft.world.IWorld;

public class SnowyLeavesBlock extends Block {

	public static final BooleanProperty SNOWY = BlockStateProperties.SNOWY;

	public SnowyLeavesBlock(Properties properties) {
		super(properties);
		this.setDefaultState(this.stateContainer.getBaseState().with(SNOWY, Boolean.valueOf(true)));
	}

	public VoxelShape getCollisionShape(BlockState state, IBlockReader reader, BlockPos pos) {
		return VoxelShapes.empty();
	}

	public int getOpacity(BlockState state, IBlockReader worldIn, BlockPos pos) {
		return 1;
	}

	public BlockState updatePostPlacement(BlockState stateIn, Direction facing, BlockState facingState, IWorld worldIn,
			BlockPos currentPos, BlockPos facingPos) {
		return facing != Direction.UP ? super.updatePostPlacement(stateIn, facing, facingState, worldIn, currentPos, facingPos)
				: stateIn.with(SNOWY, Boolean.valueOf(facingState.isIn(Blocks.SNOW_BLOCK) || facingState.isIn(Blocks.SNOW)));
	}

	public BlockState getStateForPlacement(BlockItemUseContext context) {
		BlockState blockstate = context.getWorld().getBlockState(context.getPos().up());
		return this.getDefaultState().with(SNOWY, Boolean.valueOf(blockstate.isIn(Blocks.SNOW_BLOCK) || blockstate.isIn(Blocks.SNOW)));
	}

	protected void fillStateContainer(StateContainer.Builder<Block, BlockState> builder) {
		builder.add(SNOWY);
	}

}
