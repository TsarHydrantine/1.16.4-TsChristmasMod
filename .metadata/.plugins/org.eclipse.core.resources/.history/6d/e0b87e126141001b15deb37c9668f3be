package com.tsarhydrantine.tsbase.tsEntity.SkeletonBoss;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.tsarhydrantine.tsbase.TsRegistry;
import com.tsarhydrantine.tsbase.tsEntity.goals.TsSlowMeleeAttackGoal;

import net.minecraft.enchantment.Enchantment;
import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.enchantment.Enchantments;
import net.minecraft.entity.EntityType;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.MobEntity;
import net.minecraft.entity.ai.attributes.AttributeModifierMap;
import net.minecraft.entity.ai.attributes.Attributes;
import net.minecraft.entity.ai.goal.Goal;
import net.minecraft.entity.ai.goal.LeapAtTargetGoal;
import net.minecraft.entity.ai.goal.LookAtGoal;
import net.minecraft.entity.ai.goal.LookRandomlyGoal;
import net.minecraft.entity.ai.goal.MeleeAttackGoal;
import net.minecraft.entity.ai.goal.SwimGoal;
import net.minecraft.entity.ai.goal.WaterAvoidingRandomWalkingGoal;
import net.minecraft.entity.item.ItemEntity;
import net.minecraft.entity.monster.AbstractSkeletonEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.player.ServerPlayerEntity;
import net.minecraft.entity.projectile.FireballEntity;
import net.minecraft.inventory.EquipmentSlotType;
import net.minecraft.item.ItemStack;
import net.minecraft.util.DamageSource;
import net.minecraft.util.SoundEvent;
import net.minecraft.util.SoundEvents;
import net.minecraft.util.math.vector.Vector3d;
import net.minecraft.world.BossInfo;
import net.minecraft.world.DifficultyInstance;
import net.minecraft.world.World;
import net.minecraft.world.server.ServerBossInfo;

public class IceSkeletonEntity extends AbstractSkeletonEntity {

	private final ServerBossInfo bossInfo = (ServerBossInfo) (new ServerBossInfo(this.getDisplayName(), BossInfo.Color.WHITE, BossInfo.Overlay.PROGRESS)).setDarkenSky(false);

	private final Map<Enchantment, Integer> bossEnchants = new HashMap<Enchantment, Integer>();

	public IceSkeletonEntity(EntityType<? extends AbstractSkeletonEntity> type, World worldIn) {
		super(type, worldIn);
		
		Arrays.fill(this.inventoryArmorDropChances, 0.0F);
		Arrays.fill(this.inventoryHandsDropChances, 0.0F);
	}

	public static AttributeModifierMap.MutableAttribute setCustomAttributes() {
		return MobEntity.func_233666_p_().createMutableAttribute(Attributes.MAX_HEALTH, 100.0D)
				.createMutableAttribute(Attributes.MOVEMENT_SPEED, .25D)
				.createMutableAttribute(Attributes.ATTACK_DAMAGE, 1.0D)
				.createMutableAttribute(Attributes.FOLLOW_RANGE, 40.0D);
	}

	@Override
	protected void registerGoals() {
		super.registerGoals();
		this.goalSelector.addGoal(1, new SwimGoal(this));
		this.goalSelector.addGoal(2, new LeapAtTargetGoal(this, 0.5F));
		this.goalSelector.addGoal(3, new TsSlowMeleeAttackGoal(this, 1.5D, true));
		this.goalSelector.addGoal(4, new IceSkeletonEntity.GigaSnowballAttackGoal(this));
		this.goalSelector.addGoal(5, new WaterAvoidingRandomWalkingGoal(this, 0.8D));
		this.goalSelector.addGoal(6, new LookAtGoal(this, PlayerEntity.class, 8.0F));
		this.goalSelector.addGoal(7, new LookRandomlyGoal(this));
	}

	@Override
	protected SoundEvent getAmbientSound() {
		return SoundEvents.ENTITY_SKELETON_AMBIENT;
	}

	@Override
	protected SoundEvent getHurtSound(DamageSource damageSourceIn) {
		return SoundEvents.ENTITY_SKELETON_HURT;
	}

	@Override
	protected SoundEvent getDeathSound() {
		return SoundEvents.ENTITY_SKELETON_DEATH;
	}

	@Override
	protected SoundEvent getStepSound() {
		return SoundEvents.ENTITY_SKELETON_STEP;
	}

	@Override
	protected void setEquipmentBasedOnDifficulty(DifficultyInstance difficulty) {
		this.setItemStackToSlot(EquipmentSlotType.HEAD, new ItemStack(TsRegistry.ROYAL_ICE_HELMET.get()));
		this.setItemStackToSlot(EquipmentSlotType.CHEST, new ItemStack(TsRegistry.ROYAL_ICE_CHESTPLATE.get()));
		this.setItemStackToSlot(EquipmentSlotType.LEGS, new ItemStack(TsRegistry.ROYAL_ICE_LEGGINGS.get()));
		this.setItemStackToSlot(EquipmentSlotType.FEET, new ItemStack(TsRegistry.ROYAL_ICE_BOOTS.get()));
		this.setItemStackToSlot(EquipmentSlotType.MAINHAND, new ItemStack(TsRegistry.ROYAL_ICE_HAMMER.get()));
	}

	@Override
	protected void setEnchantmentBasedOnDifficulty(DifficultyInstance difficulty) {
		ItemStack itemstack = this.getItemStackFromSlot(EquipmentSlotType.FEET);
		bossEnchants.put(Enchantments.FROST_WALKER, 2);
		EnchantmentHelper.setEnchantments(bossEnchants, itemstack);
	}

	@Override
	public boolean isNonBoss() {
		return false;
	}

	@Override
	public boolean canDespawn(double distanceToClosestPlayer) {
		return false;
	}

	@Override
	protected void updateAITasks() {
		this.bossInfo.setPercent(this.getHealth() / this.getMaxHealth());
	}

	@Override
	public void addTrackingPlayer(ServerPlayerEntity player) {
		super.addTrackingPlayer(player);
		this.bossInfo.addPlayer(player);
	}

	@Override
	public void removeTrackingPlayer(ServerPlayerEntity player) {
		super.removeTrackingPlayer(player);
		this.bossInfo.removePlayer(player);
	}

	@Override
	protected void dropSpecialItems(DamageSource source, int looting, boolean recentlyHitIn) {
		super.dropSpecialItems(source, looting, recentlyHitIn);
		ItemEntity itementity = this.entityDropItem(TsRegistry.ROYAL_ICE_HAMMER.get());
		if (itementity != null) {
			itementity.setNoDespawn();
		}

	}

	//Fireball Attack
	static class GigaSnowballAttackGoal extends Goal {
		private IceSkeletonEntity iceSkeleEntity;
		public int attackTimer;

		public GigaSnowballAttackGoal(IceSkeletonEntity skeleboss) {
			this.iceSkeleEntity = skeleboss;
		}

		public boolean shouldExecute() {
			return this.iceSkeleEntity.getAttackTarget() != null;
		}

		public void startExecuting() {
			this.attackTimer = 0;
		}

		public void tick() {
			LivingEntity livingentity = this.iceSkeleEntity.getAttackTarget();
			if (livingentity.getDistanceSq(this.iceSkeleEntity) < 4096.0D && livingentity.getDistanceSq(this.iceSkeleEntity) > 256.0D && this.iceSkeleEntity.canEntityBeSeen(livingentity)) {
				World world = this.iceSkeleEntity.world;
				++this.attackTimer;

				if (this.attackTimer == 80) {
					Vector3d vector3d = this.iceSkeleEntity.getLook(1.0F);
					double dx = livingentity.getPosX() - (this.iceSkeleEntity.getPosX() + vector3d.x * 4.0D);
					double dy = livingentity.getHeight() - 2.5D;
					double dz = livingentity.getPosZ() - (this.iceSkeleEntity.getPosZ() + vector3d.z * 4.0D);

					FireballEntity fireballentity = new FireballEntity(world, this.iceSkeleEntity, dx, dy, dz);
					fireballentity.explosionPower = 1;
					fireballentity.setPosition(this.iceSkeleEntity.getPosX() + vector3d.x * 4.0D, this.iceSkeleEntity.getPosYHeight(0.5D) + 0.5D, fireballentity.getPosZ() + vector3d.z * 4.0D);
					world.addEntity(fireballentity);
					this.attackTimer = -120;
				}
			} else if (this.attackTimer > 0) {
				--this.attackTimer;
			}

		}
	}

}
